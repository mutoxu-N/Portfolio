<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on mutoxu=N</title><link>http://localhost:1313/Portfolio/posts/</link><description>Recent content in Posts on mutoxu=N</description><generator>Hugo</generator><language>ja</language><lastBuildDate>Wed, 16 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/Portfolio/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>支払い重みに対応した割り勘アプリ「Split」</title><link>http://localhost:1313/Portfolio/posts/split_app/</link><pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/Portfolio/posts/split_app/</guid><description>&lt;p>&lt;img src="http://localhost:1313/Portfolio/Portfolio/images/posts/split_app/icon.svg" alt="アプリアイコン">&lt;/p>
&lt;h2 id="概要">概要&lt;/h2>
&lt;ul>
&lt;li>「先輩は5%多く払う」&lt;/li>
&lt;li>「飲まない人は半額」&lt;/li>
&lt;/ul>
&lt;p>ような状況に対応するための割り勘アプリ。&lt;/p>
&lt;h2 id="主な機能">主な機能&lt;/h2>
&lt;ul>
&lt;li>ルームごとに支払い情報を管理&lt;/li>
&lt;li>支払い重みで割り勘計算&lt;/li>
&lt;li>1円/10円/100円単位などでの割り勘&lt;/li>
&lt;/ul>
&lt;h2 id="技術">技術&lt;/h2>
&lt;p>アプリの全体のイメージは以下のようになっている。
&lt;img src="http://localhost:1313/Portfolio/Portfolio/images/posts/split_app/split_structure.svg" alt="全体のイメージ図">&lt;/p>
&lt;p>データの管理は&lt;a href="https://firebase.google.com/docs/firestore?hl=ja">Firestore&lt;/a>で行う
&lt;strong>三層アーキテクチャ&lt;/strong>のような構成になっている。
データの書き込みはAPIから行うことで、アプリから直接DBに書き込むことを禁止している。&lt;/p>
&lt;p>FirestoreとAndroidアプリはFirebaseのSDKを利用して、
Firestoreが更新されたときにAndroidアプリ画面上に即座に反映される仕組みになっている。&lt;/p>
&lt;h2 id="プログラム">プログラム&lt;/h2>
&lt;h3 id="android">Android&lt;/h3>
&lt;p>
&lt;a href="https://github.com/mutoxu-N/SplitApp/commits/master/">
 &lt;div class="link-card">
 &lt;div class="link-card-title">Commits · mutoxu-N/SplitApp · GitHub&lt;/div>
 &lt;div class="link-card-hostname">
 
 &lt;div class="link-card-hostname-img">
 &lt;img alt="icon" src="https://github.githubassets.com/favicons/favicon.svg">
 &lt;/div>
 
 &lt;span>github.com&lt;/span>
 &lt;/div>
 &lt;/div>
&lt;/a>
ソースコード: &lt;a href="https://github.com/mutoxu-N/SplitApp">GitHub&lt;/a>&lt;/p>
&lt;h3 id="api">API&lt;/h3>
&lt;p>
&lt;a href="https://github.com/mutoxu-N/SplitAPI">
 &lt;div class="link-card">
 &lt;div class="link-card-title">GitHub - mutoxu-N/SplitAPI&lt;/div>
 &lt;div class="link-card-hostname">
 
 &lt;div class="link-card-hostname-img">
 &lt;img alt="icon" src="https://github.githubassets.com/favicons/favicon.svg">
 &lt;/div>
 
 &lt;span>github.com&lt;/span>
 &lt;/div>
 &lt;/div>
&lt;/a>
ソースコード: &lt;a href="https://github.com/mutoxu-N/SplitAPI">GitHub&lt;/a>&lt;/p></description></item><item><title>PythonとWhisperで音声や動画からSRTファイルを生成する</title><link>http://localhost:1313/Portfolio/posts/subtitle_generator/</link><pubDate>Mon, 22 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/Portfolio/posts/subtitle_generator/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>音声文字起こし用の深層学習モデル&lt;a href="https://github.com/openai/whisper">Whisper&lt;/a>の高速版である
&lt;a href="https://github.com/SYSTRAN/faster-whisper">Faster-Whisper&lt;/a>を使った、
&lt;strong>字幕ファイル生成プログラム&lt;/strong>(SRT)。&lt;/p>
&lt;p>実行時に出てくるダイアログで音声ファイルを選択すると、
それに応じた字幕ファイルが生成される。
SRTファイルは動画編集ソフトなどに直接読み込むことができるため、
動画字幕を自動生成したいときに利用できる。&lt;/p>
&lt;h2 id="注意点">注意点&lt;/h2>
&lt;p>Faster-Whisperのモデルを使用しているため、
文字起こし精度はモデルに依存します。
僕の環境だと、&lt;code>large-v3&lt;/code> のモデルを使用しても誤字が多く、
字幕表示/非表示のタイミングも大きくズレているため、手動での調整が必須となっています。&lt;/p>
&lt;h2 id="プログラム">プログラム&lt;/h2>
&lt;p>
&lt;a href="https://github.com/mutoxu-N/SubtitleGenerator">
 &lt;div class="link-card">
 &lt;div class="link-card-title">GitHub - mutoxu-N/SubtitleGenerator&lt;/div>
 &lt;div class="link-card-hostname">
 
 &lt;div class="link-card-hostname-img">
 &lt;img alt="icon" src="https://github.githubassets.com/favicons/favicon.svg">
 &lt;/div>
 
 &lt;span>github.com&lt;/span>
 &lt;/div>
 &lt;/div>
&lt;/a>
ソースコード: &lt;a href="https://github.com/mutoxu-N/SubtitleGenerator">GitHub&lt;/a>&lt;/p></description></item><item><title>RSA電卓</title><link>http://localhost:1313/Portfolio/posts/rsa_app/</link><pubDate>Sun, 21 Jul 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/Portfolio/posts/rsa_app/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>RSA暗号の暗号化・復号化を計算するための電卓アプリ。
2つの素数を入力し、上段で暗号化、下段で復号化の演算を行っている。&lt;/p>
&lt;p>&lt;img src="http://localhost:1313/Portfolio/Portfolio/images/posts/rsa_app/screen.webp" alt="アプリ画面">&lt;/p>
&lt;h2 id="解説">解説&lt;/h2>
&lt;h3 id="鍵の生成">鍵の生成&lt;/h3>
&lt;p>2つの素数 $p, q$、暗号化したい数値(平文) $m \notin \lbrace p, q \rbrace$ において、
$n$、$\phi(n)$&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>を定義する。&lt;/p>
&lt;p>$$ n = p \cdot q $$
$$ \phi(n) = (p-1)(q-1) $$&lt;/p>
&lt;p>$n, m$ は互いに素なのでオイラーの定理&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>より以下が成り立つ。
$$ m^{\phi(n)} \equiv 1 \quad(\bmod n)$$
$$ m^{\phi(n)+1} \equiv m \quad(\bmod n)$$&lt;/p>
&lt;p>ここで、暗号化鍵(公開鍵) $d$、復号化鍵(秘密鍵) $e$ は以下のように表すことができ、
$d$ を決めると、拡張ユークリッドの互除法&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>を用いて $e$ を求められる。($d,e &amp;gt; 0$)&lt;/p>
&lt;p>$$ d \cdot e \equiv 1 \quad (\bmod\ \phi(n)) $$&lt;/p>
&lt;p>以上より、&lt;/p>
&lt;ul>
&lt;li>公開鍵: $(d, n)$&lt;/li>
&lt;li>秘密鍵: $(e, n)$&lt;/li>
&lt;/ul>
&lt;p>を求められた。&lt;/p></description></item><item><title>自鯖に外部からHTTPSアクセスするためのリバースプロキシ</title><link>http://localhost:1313/Portfolio/posts/reverse_proxy/</link><pubDate>Thu, 04 Apr 2024 00:00:00 +0000</pubDate><guid>http://localhost:1313/Portfolio/posts/reverse_proxy/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>&lt;a href="http://localhost:1313/Portfolio/Portfolio/posts/tv_rec/">TV録画サーバー&lt;/a>を外部からアクセスできるようにしたかった。&lt;/p>
&lt;p>しかし、TV放送には著作権があるので、安易にWeb上に公開することはできない。
これに対処するために必要な処置は以下の２つである。(ポート開放はできる前提)&lt;/p>
&lt;ul>
&lt;li>HTTPSによる暗号化&lt;/li>
&lt;li>ログイン認証によるアクセス制限&lt;/li>
&lt;/ul>
&lt;h2 id="nginxの設定">nginxの設定&lt;/h2>
&lt;p>HTTPS化やログイン認証にはサーバーが必要なので、
最低限のnginxサーバーを構築する。
この段階ではリバースプロキシの機能は持っておらず、
証明書発行やログインページの表示などに使用する。&lt;/p>
&lt;p>このnginxはDockerを用いて起動することができる。&lt;/p>
&lt;h2 id="httpsによる暗号化">HTTPSによる暗号化&lt;/h2>
&lt;p>HTTPSの証明書は&lt;a href="https://letsencrypt.org/ja/">Let&amp;rsquo;s Encrypt&lt;/a>を使って発行した。
便利なことに、これもDockerイメージがあるので &lt;code>certbot/certbot&lt;/code> を使って証明書の発行と自動更新を行っている。&lt;/p>
&lt;h2 id="ログイン認証">ログイン認証&lt;/h2>
&lt;h3 id="oauth2">OAuth2&lt;/h3>
&lt;p>限られたユーザーのみがTV録画を閲覧できるように、Googleアカウントによる認証を追加した。
これには、&lt;a href="https://oauth2-proxy.github.io/oauth2-proxy/">OAuth2 Proxy&lt;/a>を使用した。
OAuth2 ProxyもDocker上で動作するため、&lt;code>quay.io/oauth2-proxy/oauth2-proxy&lt;/code> を使用して実行した。&lt;/p>
&lt;p>OAuth2とGoogleの連携は多くの人が解説している通りに行った。&lt;/p>
&lt;h3 id="ホワイトリスト">ホワイトリスト&lt;/h3>
&lt;p>残念ながら、OAuth2を設定しただけでは、
どんなGoogleアカウントを使用してもアクセスできてしまうため、登録されたメールアドレスだけを許容するように設定する。&lt;/p>
&lt;p>以下のような &lt;code>allowmails&lt;/code> というファイルを作成し,
OAuth2のオプションに &lt;code>--authenticated-emails-file=&amp;quot;allowmails&amp;quot;&lt;/code> を追加することで、
そのメールアドレスのGoogleアカウントでログインしたときのみ閲覧することができる設定になる。&lt;/p>
&lt;div class="highlight">&lt;div style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>taro@example.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>jiro@example.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>saburo@example.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="リバースプロキシ">リバースプロキシ&lt;/h2>
&lt;p>nginxにリバースプロキシ機能を追加する。
これに関してはネット上に情報が溢れているので各自調べてほしいが、
TV録画サーバーにプロキシする際に &lt;code>auth_request /oauth2/auth;&lt;/code> を忘れると一般公開されるので注意しよう。&lt;/p>
&lt;p>このリバースプロキシは汎用的なものなので、TV録画サーバー以外でAPIを公開したいときなどにも使用することができる。&lt;/p></description></item><item><title>TV録画サーバーを作った話</title><link>http://localhost:1313/Portfolio/posts/tv_rec/</link><pubDate>Sat, 21 Oct 2023 00:00:00 +0000</pubDate><guid>http://localhost:1313/Portfolio/posts/tv_rec/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>TVを録画するためのサーバーを作成したときの手順と、
暗号化が解除されず、解決に1週間以上かかった話。&lt;/p></description></item><item><title>ディスプレイ設定変更.exe</title><link>http://localhost:1313/Portfolio/posts/display_config_changer/</link><pubDate>Thu, 14 Sep 2023 00:00:00 +0000</pubDate><guid>http://localhost:1313/Portfolio/posts/display_config_changer/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>デュアルディスプレイの設定変更を一発で行うことのできる実行可能ファイル。
&lt;code>Windows+P&lt;/code>で設定を変えることができるが、
アニメーションに時間がかかったり、どの設定を使用するかを選択する手間があるため、
&lt;strong>一発で&lt;/strong>特定の設定に移動できるようにしたかった。
&lt;img src="http://localhost:1313/Portfolio/Portfolio/images/posts/display_config/win_p.gif" alt="ショートカットキーで設定する例">&lt;/p>
&lt;p>また、exeファイルにしておくと、
&lt;a href="https://www.elgato.com/jp/ja/p/stream-deck-mk2-black">Elgato Stream Deck&lt;/a>に登録することができ、
物理ボタン押下でディスプレイの設定を自由に変更することができるようになる。&lt;/p>
&lt;p>&lt;img src="http://localhost:1313/Portfolio/Portfolio/images/posts/display_config/deck.png" alt="Stream Deckの設定例">&lt;/p>
&lt;p>
&lt;a href="https://github.com/mutoxu-N/DisplayConfigChanger">
 &lt;div class="link-card">
 &lt;div class="link-card-title">GitHub - mutoxu-N/DisplayConfigChanger: PCのデュアルモニター設定を変えるためだけのCPP&lt;/div>
 &lt;div class="link-card-hostname">
 
 &lt;div class="link-card-hostname-img">
 &lt;img alt="icon" src="https://github.githubassets.com/favicons/favicon.svg">
 &lt;/div>
 
 &lt;span>github.com&lt;/span>
 &lt;/div>
 &lt;/div>
&lt;/a>
ソースコード: &lt;a href="https://github.com/mutoxu-N/DisplayConfigChanger">GitHub&lt;/a>&lt;/p>
&lt;h2 id="動機">動機&lt;/h2>
&lt;p>2枚のモニターには、それぞれ2つの映像入力を行っている。
片方の映像入力はメインPCのものである。&lt;/p>
&lt;p>この前提で、以下のような使い分けをこまめに切り替えたいので、
今回のソフトウェアを開発した。&lt;/p>
&lt;h3 id="pc画面のみ１">PC画面のみ１&lt;/h3>
&lt;p>動画を見たり、簡単な調べ物をしたり、ゲームをしたり、
シングルディスプレイで事足りるときは、
メインモニターのみを使用。&lt;/p>
&lt;ul>
&lt;li>メイン: メインPC&lt;/li>
&lt;li>サブ: OFF&lt;/li>
&lt;/ul>
&lt;h3 id="pc画面のみ２">PC画面のみ２&lt;/h3>
&lt;p>サブPCをいじりながらメインPCで作業するときには、
左右でPCを分けて使用する。
(最近はSSHで済ませてしまうのであまり使わない)&lt;/p>
&lt;ul>
&lt;li>メイン: メインPC&lt;/li>
&lt;li>サブ: サブPC&lt;/li>
&lt;/ul>
&lt;h3 id="拡張">拡張&lt;/h3>
&lt;p>プログラミングや動画編集など2画面が必要なときにデュアルディスプレイで使用。&lt;/p>
&lt;ul>
&lt;li>メイン: メインPC&lt;/li>
&lt;li>サブ: メインPC&lt;/li>
&lt;/ul>
&lt;h3 id="セカンドスクリーンのみ">セカンドスクリーンのみ&lt;/h3>
&lt;p>サブPCで作業をするときや、Switchなどのゲーム機で遊ぶときなどは、
サブモニターでメインPCの画面を映す。&lt;/p>
&lt;ul>
&lt;li>メイン: ゲーム機やサブPC&lt;/li>
&lt;li>サブ: メインPC&lt;/li>
&lt;/ul>
&lt;h2 id="プログラム">プログラム&lt;/h2>
&lt;p>プログラム自体は単純で、
Windowsの&lt;a href="https://learn.microsoft.com/ja-jp/windows/win32/api/winuser/nf-winuser-setdisplayconfig">SetDisplayConfig関数&lt;/a>を呼び出すだけだった。&lt;/p>
&lt;div class="highlight">&lt;div style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#756d59">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#ebdbb2;background-color:#282828;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8ec07c">#include&lt;/span> &lt;span style="color:#8ec07c;font-style:italic">&amp;lt;windows.h&amp;gt;&lt;/span>&lt;span style="color:#8ec07c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8ec07c">#include&lt;/span> &lt;span style="color:#8ec07c;font-style:italic">&amp;lt;winuser.h&amp;gt;&lt;/span>&lt;span style="color:#8ec07c">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8ec07c">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#fabd2f">int&lt;/span> &lt;span style="color:#fabd2f">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> SetDisplayConfig(&lt;span style="color:#d3869b">0&lt;/span>,&lt;span style="color:#fabd2f">NULL&lt;/span>,&lt;span style="color:#d3869b">0&lt;/span>,&lt;span style="color:#fabd2f">NULL&lt;/span>,SDC_TOPOLOGY_INTERNAL&lt;span style="color:#fe8019">|&lt;/span>SDC_APPLY);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fe8019">return&lt;/span> &lt;span style="color:#d3869b">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>電子レンジ温め時間計算アプリ</title><link>http://localhost:1313/Portfolio/posts/microwave_calculator/</link><pubDate>Thu, 06 Apr 2023 00:00:00 +0000</pubDate><guid>http://localhost:1313/Portfolio/posts/microwave_calculator/</guid><description>&lt;p>&lt;img src="http://localhost:1313/Portfolio/Portfolio/images/posts/microwave_calculator/icon.webp" alt="アプリアイコン">&lt;/p>
&lt;h2 id="概要">概要&lt;/h2>
&lt;p>Androidアプリに興味があり、一番はじめに作ったアプリ。
Google Playストアへのリリースを行った。&lt;/p>

&lt;a href="https://play.google.com/store/apps/details?id=com.github.mutoxu_n.MicrowaveCalculator">
 &lt;div class="link-card">
 &lt;div class="link-card-title">Microwave Calculator - Apps on Google Play&lt;/div>
 &lt;div class="link-card-hostname">
 
 &lt;div class="link-card-hostname-img">
 &lt;img alt="icon" src="//www.gstatic.com/android/market_images/web/favicon_v3.ico">
 &lt;/div>
 
 &lt;span>play.google.com&lt;/span>
 &lt;/div>
 &lt;/div>
&lt;/a>
&lt;h2 id="機能">機能&lt;/h2>
&lt;ul>
&lt;li>異なるワット数の温め時間を計算する&lt;/li>
&lt;li>自分の使っているレンジに合わせてワット数を登録できる&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://localhost:1313/Portfolio/Portfolio/images/posts/microwave_calculator/screen.webp" alt="アプリ画面例">&lt;/p>
&lt;h2 id="動機">動機&lt;/h2>
&lt;p>自宅の電子レンジのワット数が730Wのものであり、
長時間の温めが必要な冷凍食品の温め時間が分からないことがあった。
( 短時間だったら適当に調整できるが500W15分とかだと,
730Wで10分くらい&amp;hellip;？」と不安になる )&lt;/p>
&lt;p>そこで、自分の使っているワット数をいくつか登録できるような&lt;strong>温め時間計算アプリ&lt;/strong>が欲しかった。&lt;/p>
&lt;p>下の入力ボックスにワット数を入力し、ワット数ボタンを長押しすると、ボタンに入力されているワット数が登録される。
900Wや1500Wの電子レンジを持っている人も、自分のレンジに合わせてワット数を登録することができる。&lt;/p>
&lt;h2 id="発表">発表&lt;/h2>
&lt;p>株式会社サポーターズ主催 ライトニングトーク大会で発表しました。(2023/4/27)

&lt;a href="https://talent.supporterz.jp/events/65ad84d5-9f88-4149-b752-f37f1682c08d/">
 &lt;div class="link-card">
 &lt;div class="link-card-title">【ライトニングトーク】最近、こんなん創ってます【賞金あり】 / 技育CAMPアカデミア | エンジニア&lt;/div>
 &lt;div class="link-card-hostname">
 
 &lt;div class="link-card-hostname-img">
 &lt;img alt="icon" src="https://talent.supporterz.jp/favicon.ico">
 &lt;/div>
 
 &lt;span>talent.supporterz.jp&lt;/span>
 &lt;/div>
 &lt;/div>
&lt;/a>&lt;/p>
&lt;h2 id="ソースコード">ソースコード&lt;/h2>
&lt;p>
&lt;a href="https://github.com/mutoxu-N/MicrowaveCalculator">
 &lt;div class="link-card">
 &lt;div class="link-card-title">GitHub - mutoxu-N/MicrowaveCalculator: Android app which converts 2 microwave wattage.&lt;/div>
 &lt;div class="link-card-hostname">
 
 &lt;div class="link-card-hostname-img">
 &lt;img alt="icon" src="https://github.githubassets.com/favicons/favicon.svg">
 &lt;/div>
 
 &lt;span>github.com&lt;/span>
 &lt;/div>
 &lt;/div>
&lt;/a>
ソースコード: &lt;a href="https://github.com/mutoxu-N/MicrowaveCalculator">GitHub&lt;/a>&lt;/p></description></item><item><title>yt-dlpにGUIをつけてYouTube動画を一括ダウンロードしたい</title><link>http://localhost:1313/Portfolio/posts/yt-dlp-gui/</link><pubDate>Mon, 06 Mar 2023 00:00:00 +0000</pubDate><guid>http://localhost:1313/Portfolio/posts/yt-dlp-gui/</guid><description>&lt;h2 id="概要">概要&lt;/h2>
&lt;p>YouTubeなどの動画プラットフォームから動画をダウンロードしたりするためのコマンドラインツールとして、
&lt;a href="https://github.com/yt-dlp/yt-dlp">yt-dlp&lt;/a>というものが存在する。&lt;/p>
&lt;p>このソフトウェアは&lt;a href="https://pypi.org/project/yt-dlp/">Pythonライブラリ&lt;/a>として利用することもでき、
これとTkinterを使用して利用しやすいGUIを実装した。&lt;/p>
&lt;p>
&lt;a href="https://github.com/mutoxu-N/yt-dlp-GUI">
 &lt;div class="link-card">
 &lt;div class="link-card-title">GitHub - mutoxu-N/yt-dlp-GUI: Provide GUI for yt-dlp and multiple download.&lt;/div>
 &lt;div class="link-card-hostname">
 
 &lt;div class="link-card-hostname-img">
 &lt;img alt="icon" src="https://github.githubassets.com/favicons/favicon.svg">
 &lt;/div>
 
 &lt;span>github.com&lt;/span>
 &lt;/div>
 &lt;/div>
&lt;/a>
ソースコード: &lt;a href="https://github.com/mutoxu-N/yt-dlp-GUI">GitHub&lt;/a>&lt;/p>
&lt;h2 id="インストール">インストール&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>&lt;a href="https://www.python.org/downloads/">公式サイト&lt;/a>からPython3.11 をダウンロードする。
(&lt;a href="https://apps.microsoft.com/detail/9nrwmjp3717k?hl=ja-jp&amp;amp;gl=JP">Microsoft Store&lt;/a>からでもOK)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/mutoxu-N/yt-dlp-GUI">GitHub&lt;/a>に飛び、
ソースコード(ZIP)をダウンロードし、ZIPファイルを解凍する。
&lt;img src="http://localhost:1313/Portfolio/Portfolio/images/posts/yt-dlp/src_dl.png" alt="ソースコード(ZIP)のダウンロード">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/BtbN/FFmpeg-Builds/releases">FFmpeg&lt;/a>をDL&amp;amp;解答し,
&lt;code>bin&lt;/code>フォルダ内の &lt;code>ffmpeg.exe&lt;/code>, &lt;code>ffplay.exe&lt;/code>, &lt;code>ffprobe.exe&lt;/code>を&lt;code>start.bat&lt;/code>と同じフォルダにコピーする。
&lt;img src="http://localhost:1313/Portfolio/Portfolio/images/posts/yt-dlp/ffmpeg.png" alt="FFmpegのコピー例">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>setup.bat&lt;/code> を実行する。(ここまでが初期設定)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>start.bat&lt;/code> を実行して、ソフトを起動する。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="problem">CLIの問題点&lt;/h2>
&lt;h3 id="詳しくないと使えない">詳しくないと使えない&lt;/h3>
&lt;p>CLIツールの主な問題として、使うために知識が必要であることがある。
特にターミナルを起動してコマンドを実行するのは、
不慣れな人にとって&lt;strong>恐怖&lt;/strong>そのもの。&lt;/p>
&lt;h3 id="オプションなどのコマンドを覚える必要がある">オプションなどのコマンドを覚える必要がある&lt;/h3>
&lt;p>&lt;code>yt-dlp&lt;/code>は高度なソフトウェアであり、
数多くのオプションを扱えるが、
その多くが&lt;strong>意味不明&lt;/strong>でよく分からない。&lt;/p>
&lt;h3 id="ある操作を繰り返す際にコマンドを書くのが面倒">ある操作を繰り返す際にコマンドを書くのが面倒&lt;/h3>
&lt;p>ある動画をダウンロードするコマンドがあっても、
複数の動画をDLしたいときには、1動画に対して1つずつコマンドを実行する必要がある。
スクリプトを書ける人なら繰り返しを使って一括処理できそうだが、
&lt;strong>全員がShellScriptを扱えるわけじゃない&lt;/strong>。&lt;/p>
&lt;h2 id="実装した内容">実装した内容&lt;/h2>
&lt;p>&lt;a href="#problem">CLIの問題点&lt;/a>の内容を踏まえて以下のような機能を実装した。&lt;/p>
&lt;h3 id="gui">GUI&lt;/h3>
&lt;p>とにかくCLIは難しい(&lt;del>難しそうにみえる&lt;/del>)ので、
TkinterでGUIを作成した。
&lt;img src="http://localhost:1313/Portfolio/Portfolio/images/posts/yt-dlp/gui.png" alt="yt-dlpのGUI画像">&lt;/p>
&lt;h3 id="mp3形式でdl">MP3形式でDL&lt;/h3>
&lt;p>音楽などは、動画より音声でDLしたいという需要がある。
その中でもMP3形式は幅広く利用されているためこれに対応した。&lt;/p>
&lt;h3 id="一括dl">一括DL&lt;/h3>
&lt;p>出力フォルダに&lt;code>download_list.txt&lt;/code>を配置することで、
複数の動画から一括でダウンロードを実行することができる。
デフォルトではMP3形式でダウンロードされるので、
ダウンロードしたい音楽のURLを1行ずつ記載しておけば、
すべてが自動でDLされる。
&lt;img src="http://localhost:1313/Portfolio/Portfolio/images/posts/yt-dlp/list.png" alt="一括DLの設定ファイル例">&lt;/p>
&lt;h3 id="限定動画のdl">限定動画のDL&lt;/h3>
&lt;p>YouTubeの動画の中には、視聴条件として&lt;/p>
&lt;ul>
&lt;li>YouTube Premiumに加入&lt;/li>
&lt;li>メンバーシップに参加&lt;/li>
&lt;/ul>
&lt;p>が設定されているものがある。&lt;/p>
&lt;p>このような限定動画に対応するために、
ブラウザのCookie情報を読み込んでダウンロードを行う機能を実装している。&lt;/p>
&lt;p>&lt;a href="https://chromewebstore.google.com/detail/get-cookiestxt-locally/cclelndahbckbenkjhflpdbgdldlbecc">Get cookies.txt LOCALLY&lt;/a>
のような拡張機能を利用して &lt;code>youtube.com&lt;/code> のCookie情報をテキストファイルに出力すれば、
ブラウザのログイン情報を使って動画をDLすることができる。&lt;/p></description></item></channel></rss>